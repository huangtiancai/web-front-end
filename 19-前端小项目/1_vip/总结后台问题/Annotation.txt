使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元素

三个基本的 Annotation:	
	@Override: 限定重写父类方法, 该注解只能用于方法
	@Deprecated: 用于表示某个程序元素(类, 方法等)已过时
	@SuppressWarnings: 抑制编译器警告

定义新的 Annotation 类型使用 @interface 关键字
Annotation 的成员变量在 Annotation 定义中以无参数方法的形式来声明.
其方法名和返回值定义了该成员的名字和类型. 
可以在定义 Annotation 的成员变量时为其指定初始值, 
指定成员变量的初始值可使用 default 关键字

public @interface MyAnnotation{
	       String name() default “atguigu";        
}
没有成员定义的 Annotation 称为标记; 包含成员变量的 Annotation 称为元数据 Annotation

JDK5.0提供了专门在注解上的注解类型，分别是：
Retention
Target
Documented
Inherited


@Retention: 只能用于修饰一个 Annotation 定义, 用于指定该 Annotation 可以保留多长时间,@Rentention 包含一个 RetentionPolicy 类型的成员变量, 使用 @Rentention 时必须为该 value 成员变量指值:

RetentionPolicy.SOURCE: 编译器直接丢弃这种策略的注解
RetentionPolicy.CLASS: 编译器将把注解记录在 class 文件中. 当运行 Java 程序时, JVM 不会保留注解。 这是默认值RetentionPolicy.RUNTIME:编译器将把注释记录在 class 文件中. 当运行 Java 程序时, JVM 会保留注解. 程序可以通过反射获取该注解


@Target: 用于修饰 Annotation 定义, 用于指定被修饰的 Annotation 能用于修饰哪些程序元素. @Target 也包含一个名为 value 的成员变量.

@Documented: 用于指定被该元 Annotation 修饰的 Annotation 类将被 javadoc 工具提取成文档.定义为Documented的注解必须置Retention值为RUNTIME。

@Inherited: 被它修饰的 Annotation 将具有继承性.如果某个类使用了被 @Inherited 修饰的 Annotation, 则其子类将自动具有该注解，但实际应用中，使用较少








